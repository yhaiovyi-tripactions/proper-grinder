# Cursor AI Code Editor Configuration

## Project Context

This is an **Embassy** embedded systems project for STM32F411 microcontrollers using async/await concurrency.

### Critical Requirements:
- **ALL functionality is time-sensitive** - timing precision is crucial
- **Real-time constraints** - tasks must execute within strict deadlines  
- **Async/await architecture** - tasks are cooperative and use Embassy's executor
- **No_std environment** - standard library is not available
- **Resource sharing** - shared resources must be protected with Embassy's synchronization primitives
- **Deterministic behavior** - code execution must be predictable and consistent

### Embassy-Specific Guidelines:
- Tasks should be async functions that yield control with `.await`
- Use Embassy's built-in drivers for peripherals when available
- Leverage Embassy's time management (`Timer`, `Delay`, `Ticker`) for precise timing
- Use Embassy's synchronization primitives (`Mutex`, `Channel`, `Signal`) for resource sharing
- Prefer Embassy's interrupt handling over direct interrupt manipulation
- Use Embassy's GPIO and peripheral abstractions for hardware access
- Test timing-critical code thoroughly on target hardware

## Module-Specific Guidelines

### src/button.rs
- **MUST** implement reusable, async button click handling using Embassy patterns
- **MUST** include software debouncing using Embassy's `Timer` for delays
- **MUST** provide first-party Embassy support with proper async task integration
- **MUST** be event-driven using async/await with Embassy's `Signal` or `Channel` for communication
- **MUST** expose clean, modular API for integration with main Embassy application
- **MUST** support both active-high and active-low button configurations
- **MUST** remain hardware and application agnostic - no assumptions about what is being controlled
- **SHOULD** provide configurable debounce timing using Embassy's time abstractions
- **SHOULD** return structured events (Press/Release) and actions (Toggle/None) via async channels
- **SHOULD** use generic action names (Toggle, not ToggleLed; Action, not LedAction)
- **AVOID** blocking operations - use Embassy's async patterns instead
- **AVOID** direct interrupt handling - leverage Embassy's GPIO interrupt abstractions
- **AVOID** hardcoding specific implementation details (LED, motor, etc.) in action names
- **AVOID** assuming what the button controls - keep actions generic and extensible

### src/config.rs
- **MUST** centralize all hardware-specific configuration parameters
- **MUST** provide compile-time constants for timing parameters (debounce, blink rates, delays)
- **MUST** define pin assignments and GPIO configurations in a structured, type-safe manner
- **MUST** specify Embassy executor configuration and task priorities if using priority executor
- **MUST** include clock configuration parameters (system clock, peripheral clocks)
- **MUST** organize configuration by functional modules (pins, timing, embassy, clocks)
- **MUST** use descriptive, self-documenting constant names with units (MS, HZ suffixes)
- **MUST** provide comprehensive documentation for each configuration parameter
- **MUST** be hardware-specific but platform-agnostic (easy to port to other STM32 variants)
- **SHOULD** group related constants into logical modules or structs
- **SHOULD** provide alternative configurations for different hardware revisions
- **SHOULD** include validation ranges or constraints in documentation
- **SHOULD** export pin initialization functions that return properly configured Embassy-compatible pins
- **SHOULD** define Embassy task configuration based on real-time requirements
- **SHOULD** provide timing constants that work well with Embassy's time management
- **AVOID** magic numbers scattered throughout the codebase
- **AVOID** hardcoding hardware details in main application logic
- **AVOID** coupling configuration to specific HAL implementations where possible
- **AVOID** overly complex configuration that makes the code hard to understand
- **AVOID** configuration parameters that change at runtime (prefer compile-time constants)

## Commit Message Guidelines

All commit messages MUST follow the Conventional Commits specification:

### Format
```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Types (REQUIRED):
- **feat**: A new feature
- **fix**: A bug fix  
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **perf**: A code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to the build process or auxiliary tools and libraries such as documentation generation

### Examples:
```
feat: add async button debouncing with Embassy
fix: resolve LED timing issue in Embassy task
docs: update README with Embassy async patterns
refactor: migrate from RTIC to Embassy async/await
chore: update dependencies to latest Embassy version
```

### Rules:
1. Use lowercase for type and description
2. No period at the end of the description
3. Keep description under 50 characters when possible
4. Use imperative mood ("add feature" not "added feature")
5. Include scope when appropriate (e.g., "feat(button): add async debouncing")

## Code Style
- Follow Rust standard formatting with `cargo fmt`
- Run `cargo clippy` before committing
- Remove dead code and unused dependencies
- Write meaningful variable and function names 