# Cursor AI Code Editor Configuration

## Project Context

This is an **RTIC (Real-Time Interrupt-driven Concurrency)** embedded systems project for STM32F411 microcontrollers. 

### Critical Requirements:
- **ALL functionality is time-sensitive** - timing precision is crucial
- **Real-time constraints** - code must execute within strict deadlines
- **Interrupt-driven architecture** - tasks are triggered by hardware events
- **No_std environment** - standard library is not available
- **Resource sharing** - shared resources must be protected from race conditions
- **Deterministic behavior** - code execution must be predictable and consistent

### RTIC-Specific Guidelines:
- Tasks should be lightweight and complete quickly
- Avoid blocking operations in high-priority tasks
- Use async/await for delays and time-based operations
- Shared resources must use proper locking mechanisms
- Consider interrupt priorities and task scheduling
- Test timing-critical code thoroughly on target hardware

## Module-Specific Guidelines

### src/button.rs
- **MUST** implement reusable, interrupt-driven button click handling
- **MUST** include software debouncing to eliminate mechanical switch bounce
- **MUST** provide first-party RTIC support with proper resource sharing
- **MUST** be event-driven with zero polling loops in main logic
- **MUST** expose clean, modular API for integration with main application
- **MUST** support both active-high and active-low button configurations
- **MUST** remain hardware and application agnostic - no assumptions about what is being controlled
- **SHOULD** provide configurable debounce timing
- **SHOULD** return structured events (Press/Release) and actions (Toggle/None)
- **SHOULD** use generic action names (Toggle, not ToggleLed; Action, not LedAction)
- **AVOID** blocking operations or long-running code in interrupt context
- **AVOID** direct hardware dependencies - accept pin states as parameters
- **AVOID** hardcoding specific implementation details (LED, motor, etc.) in action names
- **AVOID** assuming what the button controls - keep actions generic and extensible

### src/config.rs
- **MUST** centralize all hardware-specific configuration parameters
- **MUST** provide compile-time constants for timing parameters (debounce, blink rates, delays)
- **MUST** define pin assignments and GPIO configurations in a structured, type-safe manner
- **MUST** specify interrupt mappings (EXTI lines, interrupt numbers, priorities)
- **MUST** include clock configuration parameters (system clock, peripheral clocks)
- **MUST** organize configuration by functional modules (pins, timing, interrupts, clocks)
- **MUST** use descriptive, self-documenting constant names with units (MS, HZ suffixes)
- **MUST** provide comprehensive documentation for each configuration parameter
- **MUST** be hardware-specific but platform-agnostic (easy to port to other STM32 variants)
- **SHOULD** group related constants into logical modules or structs
- **SHOULD** provide alternative configurations for different hardware revisions
- **SHOULD** include validation ranges or constraints in documentation
- **SHOULD** export pin initialization functions that return properly configured pins
- **SHOULD** define interrupt priority levels based on real-time requirements
- **SHOULD** provide timing constants that work well with RTIC's systick monotonic
- **AVOID** magic numbers scattered throughout the codebase
- **AVOID** hardcoding hardware details in main application logic
- **AVOID** coupling configuration to specific HAL implementations where possible
- **AVOID** overly complex configuration that makes the code hard to understand
- **AVOID** configuration parameters that change at runtime (prefer compile-time constants)

## Commit Message Guidelines

All commit messages MUST follow the Conventional Commits specification:

### Format
```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Types (REQUIRED):
- **feat**: A new feature
- **fix**: A bug fix  
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **perf**: A code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to the build process or auxiliary tools and libraries such as documentation generation

### Examples:
```
feat: add button debouncing support
fix: resolve LED timing issue  
docs: update README with hardware setup
refactor: remove dead code from button module
chore: update dependencies to latest versions
```

### Rules:
1. Use lowercase for type and description
2. No period at the end of the description
3. Keep description under 50 characters when possible
4. Use imperative mood ("add feature" not "added feature")
5. Include scope when appropriate (e.g., "feat(button): add debouncing")

## Code Style
- Follow Rust standard formatting with `cargo fmt`
- Run `cargo clippy` before committing
- Remove dead code and unused dependencies
- Write meaningful variable and function names 